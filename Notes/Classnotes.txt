type casting (to convert one primitive-primitive type):
----------------
byte b1=123;
short s1=b1; // wide casting/implicit casting
int i1=b1;
long l1=b1;
float f1=b1;
double d1=b1;

int i2=123;
byte b2=(byte)i2; 
// explicit type casting/narrow casting
short s2=(short)i2;
long l2=i2;
float f2=i2;
double d2=i2;

long l3=12345;
byte b3=(byte)l3;
short s3=(short)l3;
int i3=(int)l3;
float f3=(float)l3;
double d3=l3;

float f4=123.45;
byte b4=(byte)f4;
short s4=(short)f4;
int i4=(int)f4;
long l4=(long)f4;
double d4=f4;

type conversion using wrapper class:
------------------------------------
type conversion is used to convert String to primitive values using wrapper classes.

datatype			wrapper class
---------------------------------------------
byte				Byte
short				Short
int				Integer
long				Long
float				Float
double				Double
char				Character
boolean				Boolean

public class Integer extends Number {
  
  public Integer Integer(int i) {}
  public Integer(String str) {}

  public byte byteValue(){}
  public short shortValue(){}
  public int intValue(){}
  public float floatValue(){}
  public long longValue(){}
  public double doubleValue(){}

  public static Integer valueOf(String str) {}
  public static int parseInt(String str) {}
}

// StringToIntConversion.java
class StringToIntConversion {
  public static void main(String rags[]) {
    String sage=rags[0];

    // I way
    int age=Integer.parseInt(sage);
    System.out.println(age);

    // II way
    Integer in=new Integer(sage);    
    age=in.intValue();
    System.out.println(age);

    /// III way
    in=Integer.valueOf(sage);
    age=in.intValue();
    System.out.println(age);		
  }
}

javac StringToIntConversion.java
java StringToIntConversion 19

Topics:
-------
Datatypes & type conversions
Arrays
Exceptions
OOPs
Collections

Arrays:
-------
I Dimensional Array:
--------------------
How to declare and initialize static array:
How to declare and initialize dynamic array:
Iterate over array using length and index
Iterate over array using for-each loop

// IDimArray.java
class IDimArray {
  public static void main(String rags[]) {
    // static array decl & init
    int i1[]=new int[5];
    i1[0]=1; i1[1]=2; i1[2]=3; i1[3]=4; i1[4]=5;

    // dynamic array decl & init
    int i2[]={1,2,3,4,5};

    // iterate over array using index
    int len1=i1.length;
    for(int j=0; j<len1; j++) {
      System.out.print(i1[j]+" ");
    }
    System.out.println("\n***********");
    
    // iterate over array using for-each loop
    for(int i:i2) {
      System.out.print(i+" ");
    } 
    System.out.println("\n***********"); 
  }
}

// IIDimArray.java
class IIDimArray {
  public static void main(String rags[]) {
    // static array decl & init
    int i1[][]=new int[2][3];
    i1[0][0]=1; i1[0][1]=2; i1[0][2]=3;
    i1[1][0]=4; i1[1][1]=5; i1[1][2]=6;
    
    // dynamic array decl & init
    int i2[][]={ {1,2,3}, {4,5,6} };

    // iterate using index
    int len1=i1.length; // row len, 2
    for(int i=0;i<len1;i++) {
      int len2=i1[i].length; // cols len in each row, 3
      for(int j=0;j<len2;j++) {
       System.out.print(i1[i][j]+" ");
      }
      System.out.println("\n************");
    }
    System.out.println("\n************");
    
    // using for-each loop
    for(int i[]:i2) {
      for(int j:i) {
        System.out.print(j+" ");
      }
      System.out.println("\n************");
    }
     System.out.println("\n************");
  }
}

// IIIDimArray.java
class IIIDimArray {
  public static void main(String rags[]) {
    int i1[][][]=new int[2][3][4];
    i1[0][0][0]=1; i1[0][0][1]=1; i1[0][0][2]=2; i1[0][0][3]=4;
    i1[0][1][0]=5; i1[0][1][1]=6; i1[0][1][2]=7; i1[0][1][3]=8;  
    i1[0][2][0]=9; i1[0][2][1]=10; i1[0][2][2]=11; i1[0][2][3]=12;

    i1[1][0][0]=13; i1[1][0][1]=14; i1[1][0][2]=15; i1[1][0][3]=16;
    i1[1][1][0]=17; i1[1][1][1]=18; i1[1][1][2]=19; i1[1][1][3]=20;  
    i1[1][2][0]=21; i1[1][2][1]=22; i1[1][2][2]=23; i1[1][2][3]=24;

    int i2[][][]={
		  { {1,2,3,4}, {5,6,7,8}, {9,10,11,12} },
		  { {13,14,15,16}, {17,18,19,20}, {21,22,23,24} }
		};

    // iterate using index
    int len1=i1.length;
    for(int i=0;i<len1;i++) {
      int len2=i1[i].length;
      for(int j=0;j<len2;j++) {
        int len3=i1[i][j].length;
        for(int k=0;k<len3;k++) {
          System.out.print(i1[i][j][k]+" ");
        }
        System.out.println();
      }
      System.out.println();
    }  

    System.out.println("*********************");

    for(int i[][]:i2) {
      for(int j[]:i) {
	for(int k:j) {
	    System.out.print(k+" ");
	}
	System.out.println();
      }
      System.out.println();
    }
  }
}

0	0 0		1 0		2 0	
	  1		  1		  1	
          2  		  2 		  2
          3  	  	  3		  3

1	0 0		1 0		2 0	
	  1		  1		  1	
          2  		  2 		  2
          3  	  	  3		  3
















